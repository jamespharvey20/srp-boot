#!/usr/bin/ash

SBFT_DIR="/sys/firmware/sbft"
INFINIBAND_SRP_CLASS_ROOT_DIR="/sys/class/infiniband_srp"
INFINIBAND_CLASS_ROOT_DIR="/sys/class/infiniband"

# Load kernel modules

for module in ib_sbft ib_core ib_umad ib_uverbs ib_ucm rdma_ucm ib_srp; do
	modprobe ${module}
	if [ $? -ne 0 ]; then
		echo "srp-boot: Failed to load module ${module}"
		exit 1;
	fi
done

if [ ! -d "${SBFT_DIR}" ]; then
	echo "srp-boot: ${SBFT_DIR} does not exist, ib_sbft module must have improperly loaded."
	exit 2;
fi

# Load sBFT (SRP Boot Firmware Table) data

for sbft_data in srp_initiator_port_identifier srp_target_port_identifier ib_destination_gid ib_partition_key ib_service_identifier ib_source_gid; do
	if [ ! -r "${SBFT_DIR}/$sbft_data" ]; then
		echo "srp-boot: ${SBFT_DIR}/$sbft_data does not exist or is not readable, ib_sbft module must have failed to correctly parse this."
		exit 3;
	fi
	eval $sbft_data="$( cat ${SBFT_DIR}/${sbft_data} )"
done
	
# Set variables for SRP add_target

#id_ext - 16 hex digits giving the 8 byte identifier extension (first half) of the 16 byte SRP target port identifier
id_ext="$( echo ${srp_target_port_identifier} | sed 's/://g; s/\(.\{16\}\).*/\1/' )"

#ioc_guid - 16 hex digits giving the 8 byte I/O controller guid (second half) of the 16 byte SRP target port identifier
ioc_guid="$( echo ${srp_target_port_identifier} | sed 's/://g; s/\(.\{16\}\)\(.\{16\}\).*/\2/' )"

#dgid - 32 hex digits specifying destination gid (ib_destination_gid)
dgid="$( echo ${ib_destination_gid} | sed 's/://g' )"

#pkey - 4 hex digits giving the InfiniBand partition key
pkey=${ib_partition_key}

#service_id - 16 hex digits giving InfiniBand service ID used to establish communication
service_id="$( echo ${ib_service_identifier} | sed 's/://g' )"

#initiator_ext - 16 hex digits giving the 8 byte identifier extension (first half) of the 16 byte SRP initiator port identifier
initiator_ext="$( echo ${srp_initiator_port_identifier} | sed 's/://g; s/\(.\{16\}\).*/\1/' )"

# Set hca and port_number

#    1. This should never be needed, but they can be given as kernel arguments srp.hca and srp.port_number

found_kernel_arguments=0
set -- $( cat /proc/cmdline )
for argument in "$@"; do
	result="$( echo ${argument} | grep -e '^srp.hca=' | sed 's/^srp.hca=//' )"
	if [ "${result}" != "" ]; then
		found_kernel_arguments=1
		kernel_hca="${result}"
	fi
	result="$( echo ${argument} | grep -e '^srp.port_number=' | sed 's/^srp.port_number=//' )"
	if [ "${result}" != "" ]; then
		found_kernel_arguments=1
		kernel_port_number="${result}"
	fi
done

#       a. Only use them if both are given

if [ ! -z $kernel_hca ]; then
	if [ ! -z $kernel_port_number ]; then
		hca="${kernel_hca}"
		port_number="${kernel_port_number}"
	fi
fi

#   2. If kernel arguments aren't given, they should always be able to be auto-detected by matching ib_source_gid

if [ -z $hca ]; then
	if [ -z $port_number ]; then
		if [ $found_kernel_arguments -eq 1 ]; then
			echo "srp_boot: If you are going to give srp.hca or srp.port_number as kernel arguments, you must give both, attempting auto-detection..."
		fi
		for srp in $INFINIBAND_SRP_CLASS_ROOT_DIR/*; do
			if [ ! -r "${srp}/ibdev" ]; then
				echo "srp_boot: ${srp}/ibdev does not exist or is not readable, skipping"
				continue
			fi
			auto_ibdev=$( cat "${srp}/ibdev" )

			if [ ! -r "${srp}/port" ]; then
				echo "srp_boot: ${srp}/port does not exist or is not readable, skipping"
				continue
			fi
			auto_port=$( cat "${srp}/port" )

			PORT_DIR="$INFINIBAND_CLASS_ROOT_DIR/${auto_ibdev}/ports/${auto_port}"

			if [ ! -r "${PORT_DIR}/gids/0" ]; then
				echo "srp_boot: ${PORT_DIR}/gids/0 does not exist or is not readable, skipping"
				continue
			fi
			port_gid=$( cat "${PORT_DIR}/gids/0" )

			if [ "${port_gid}" == "${ib_source_gid}" ]; then
				hca="${auto_ibdev}"
				port_number="${auto_port}"
				break
			fi
		done

		# Error if port_number is still unset
		if [[ -z $port_number ]]; then
			echo "srp-boot: Couldn't auto-detect port_number by ib_source_gid, and kernel argument srp.port_number not found.  Either HCA kernel driver isn't properly loaded or wrong kernel parameter was given."
			exit 4;
		fi
	fi

	# Error if hca is still unset
	if [[ -z $hca ]]; then
		echo "srp-boot: Couldn't auto-detect hca by ib_source_gid, and kernel argument srp.hca not found.  Either HCA kernel driver isn't properly loaded or wrong kernel parameter was given."
		exit 5;
	fi
fi

# Initiate SRP connection

HCA_DIR="${INFINIBAND_SRP_CLASS_ROOT_DIR}/srp-${hca}-${port_number}"
if [ ! -d "${HCA_DIR}" ]; then
	echo "srp-boot: ${HCA_DIR} does not exist, either HCA kernel driver isn't properly loaded or wrong kernel parameter was given."
	exit 6;
fi

ADD_TARGET="${HCA_DIR}/add_target"
if [ ! -w "${ADD_TARGET}" ]; then
	echo "srp-boot: ${ADD_TARGET} does not exist or is not writable."
	exit 7;
fi

PORT_DIR="$INFINIBAND_CLASS_ROOT_DIR/${hca}/ports/${port_number}"
if [ ! -r "${PORT_DIR}/state" ]; then
	echo "srp-boot: ${PORT_DIR}/state does not exist or is not readable."
	exit 8
fi

unknown_error=0
for i in $( seq 100 ); do
	port_state=$( cat "${PORT_DIR}/state" )
	if [ "${port_state}" != "4: ACTIVE" ]; then
		echo "srp-boot: Retrying in 1 second, ${PORT_DIR}/state is \"${port_state}\" instead of \"4: ACTIVE\".  Likely waiting for connection to InfiniBand Service Manager..."
		sleep 1
		continue
	elif [ $unknown_error -eq 1 ]; then
		echo "srp-boot: Retrying in 1 second, unknown error..."
		sleep 1
	fi

	echo "id_ext=${id_ext},ioc_guid=${ioc_guid},dgid=${dgid},pkey=${pkey},service_id=${service_id},initiator_ext=${initiator_ext}" > ${ADD_TARGET}

	if [ $? -eq 0 ]; then
		break
	fi

	unknown_error=1

	if [ $i -eq 100 ]; then
		echo "srp-boot: Retried 100 times, giving up..."
		exit 9
	fi
done
